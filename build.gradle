group 'com.example.junit.travis'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}
//
//dependencies {
////    testCompile group: 'junit', name: 'junit-jupiter', version: '5.5.2'
////    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
////    testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.2"
//    testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.2'
//}

dependencies {
//    testRuntime 'junit:junit:4.12'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M4'
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0-M4")
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    useJUnitPlatform()
}

sourceSets {
    test {
        java {
            srcDirs = ['test']
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

import groovy.time.TimeCategory
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

rootProject {
    ext.testsResults = [] // Container for tests summaries

    allprojects { project ->
        tasks.withType(Test) { testTask ->

            testTask.testLogging { logging ->
                events TestLogEvent.FAILED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_OUT,
                        TestLogEvent.STANDARD_ERROR

                exceptionFormat TestExceptionFormat.FULL
                showExceptions true
                showCauses true
                showStackTraces true
            }

            ignoreFailures = true // Always try to run all tests for all modules

            afterSuite { desc, result ->

                if (desc.parent) return // Only summarize results for whole modules

                String summary = "${testTask.project.name}:${testTask.name} results: ${result.resultType} " +
                        "(" +
                        "${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, " +
                        "${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped" +
                        ") " +
                        "in ${TimeCategory.minus(new Date(result.endTime), new Date(result.startTime))}" +
                        "\n" +
                        "Report file: ${testTask.reports.html.entryPoint}"

                // Add reports in `testsResults`, keep failed suites at the end
                if (result.resultType == TestResult.ResultType.SUCCESS) {
                    rootProject.testsResults.add(0, summary)
                } else {
                    rootProject.testsResults += summary
                }
            }
        }
    }
}

gradle.buildFinished {
    def allResults = rootProject.ext.testsResults

    if (!allResults.isEmpty()) {
        printResults allResults
    }
}

private static void printResults(allResults) {
    def maxLength = allResults*.readLines().flatten().collect { it.length() }.max()

    println "┌${"${"─" * maxLength}"}┐"

    println allResults.collect {
        it.readLines().collect {
            "│" + it + " " * (maxLength - it.length()) + "│"
        }.join("\n")
    }.join("\n├${"${"─" * maxLength}"}┤\n")

    println "└${"${"─" * maxLength}"}┘"
}